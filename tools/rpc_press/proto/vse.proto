syntax = "proto3";

package dg.model.vse;

import "common.proto";
import "altair.proto";
import "task.proto";
import "config.proto";

option cc_generic_services = true;

service VSEService {
	// ping
	rpc Ping(PingRequest) returns (PingResponse) {
	}

	// 查询版本
	rpc Version(VersionRequest) returns (VersionResponse) {
	}

	// 获取程序启动配置
	rpc GetConfig(ConfigRequest) returns (ConfigResponse) {}

	// 新建　视频（直播/历史流/抽帧）/图片流　分析任务
	rpc NewTask(NewTaskRequest) returns (NewTaskResponse) {
	}

	// new task with split time range
	rpc NewTaskWithSplit(NewTaskRequest) returns (NewTaskResponse) {
    }

	// 删除视频分析任务
	rpc RemoveTask(RemoveTaskRequest) returns (RemoveTaskResponse) {
	}

	// 删除视频分析任务
    rpc RemoveAll(HttpRequest) returns (HttpResponse) {
    }

	// 获取任务配置
	rpc GetTaskConfig(GetTaskConfigRequest) returns (GetTaskConfigResponse) {
	}

	// 查询授权状态
	rpc GetAllResource(HostResRequest) returns (HostResource) {}

	// 查询任务状态
	rpc Status(StatusRequest) returns (StatusResponse) {
	}

	// 查询媒体信息
	rpc MediaInfo(MediaInfoRequest) returns (MediaInfoResponse) {
	}

	// 截取原始图像 - 暂时未实现
	rpc Screenshot(ScreenshotRequest) returns (ScreenshotResponse) {
	}

	// 截取监视图像 - 暂时未实现
	rpc Watch(WatchRequest) returns (WatchResponse) {
	}

	// 查询设备目录
	rpc Catalog(CatalogRequest) returns (CatalogResponse) {
	}

	// Debug-Callback
	rpc Debug_Callback(HttpRequest) returns (HttpResponse) {
	}

	// to open or close log
	rpc LogCheck(LogRequest) returns (LogResponse){}
	// 接收抓拍机的图片任务,推送kafka
	rpc PushImage(PushImageRequest) returns (PushImageResponse){
	}

	// 接收抓拍机的图片任务,推送kafka
	rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse){
	}

	rpc DebugPush(DebugPushRequest) returns (PushImageResponse){
	}

}

message PushImageRequest {
	altair.DetectResult result = 1;
	string task_id = 2;
};

message DebugPushRequest {
	string task_id = 1;
	string img_url = 2;
};

message PushImageResponse {
	sint32 result = 1;
};

message ConfigRequest {}
message ConfigResponse{}

message LogRequest{

}
message LogResponse{

}

message PingRequest {
}

message PingResponse {
}

message HeartbeatRequest {
	string task_id = 1001;
}

message HeartbeatResponse {
	// 状态码
	int32 code = 1001;
	// 状态文本
	string message = 1002;
}

message HttpRequest {
}

message HttpResponse {
}

// 版本请求
message VersionRequest {
}

// 版本返回
message VersionResponse {

	// 各模块版本集合
	map<string, string> versions = 1001;
}

// 新建分析任务请求
message NewTaskRequest {

	// 任务的ID，该ID不允许重复
	string task_id = 1001;

	// 任务的名称
	string task_name = 1101;

	// 视频输入源 支持　rtsp/file/netposa/pfs/infinova/gb28181等格式
	dg.model.common.Uri video_input = 1002;

	// 任务源类型，可选的任务类型有：live, vod, file, image, image-stream
	string task_type = 1003;

	// 是否只解关键帧
	bool task_key_frame = 1013;

	// file模式下的文件第一帧的绝对时间戳，使用unix timestamp毫秒（vod模式和live模式下该参数无效）
	int64 base_time = 1004;

	// file模式和vod模式下，播放视频的起始时间戳，使用unix timestamp毫秒（live模式下该参数无效）
	int64 start_time = 1005;

	// file模式和vod模式下，播放视频的结束时间戳，使用unix timestamp毫秒（live模式下该参数无效）
	int64 end_time = 1006;

	// 分析速率，1为正常速度
	float speedx = 1007;

	// 感兴趣区域或屏蔽区域集合
	repeated dg.model.common.Roi rois = 1008;

	int64 context = 1009;

	int32 split_number = 1010;

	int64 split_ms = 1011;

	// 功能清单
	dg.model.common.Function function = 2001;

	// 启用debug模式，默认为false(不使用debug模式)
	bool debug = 2002;

	// 启用本地化输出模式，默认为false(不使用本地化模式)
	bool localization = 2003;

	// 优先级
	int32 priority = 2004;

	// 系统状态消息回调地址
	dg.model.common.Uri sys_event_output = 3001;

	// 渲染视频输出地址
	dg.model.common.Uri render_output = 3002;

	// 数据流输出地址
	dg.model.common.Uri vsd_output = 3003;

	// 用户透传的自定义数据
	map<string, string> user_data = 4001;

	// 扩展信息
	map<string, string> extends = 4002;

	//　需要调整的阈值
	dg.model.common.Threshold Threshold = 4003;

	// 需要调整的系统参数
	dg.model.common.Sys Sys = 4004;

	dgvse.config.Arcee Arcee = 4005;
}

// 新建分析任务返回
message NewTaskResponse {

	// 状态码
	int32 code = 1001;
	// 状态文本
	string message = 1002;
	string task_id = 1003;
	string task_name = 1004;
	string render_rtsp_uri = 1005;
	string render_rtmp_uri = 1006;
}

// 删除分析任务请求
message RemoveTaskRequest {

	// 任务的ID，该ID不允许重复
	string task_id = 1001;
}

// 删除分析任务返回
message RemoveTaskResponse {

	// 状态码
	int32 code = 1001;

	// 状态文本
	string message = 1002;
}

// 服务状态请求
message StatusRequest {

	// 任务的ID，该ID不允许重复，为空时返回全部状态
	string task_id = 1001;
}

// 服务状态返回
message StatusResponse {
	int32 task_num = 1000;
	// 任务状态统计
	map<string, int32> task_state_num = 1002;
	// 任务状态
	repeated TaskStatus task_status = 1001;
}

// 媒体信息请求
message MediaInfoRequest {
	string uri = 1;
	map<string, string> params = 2;
}

// 媒体信息返回
message MediaInfoResponse {

	// 编解码格式
	common.CODEC_TYPE codec = 1001;

	// 在VSE中是否支持该编解码格式
	bool supported_codec = 1002;


	// 视频的宽
	int32 width = 2001;

	// 视频的高
	int32 height = 2002;

	// 在VSE中是否支持该分辨率
	bool supported_resolution = 2003;



	// 比特率
	float bitrate = 3001;

	// 帧率
	float fps = 3002;

	// 总时长，单位ms
	int32 duration = 3003;



	// 媒体是否可以进行偏移
	bool seekable = 4001;

	// 状态码
	int32 code = 5001;

	// 状态文本
	string message = 5002;
}

// 视频截图请求
message ScreenshotRequest {

	// 视频输入源
	dg.model.common.Uri video_input = 1001;

	// 任务类型，可选的任务类型有：live, vod, file
	string task_type = 1002;

	// file模式下的文件第一帧的绝对时间戳，使用unix timestamp毫秒（vod模式和live模式下该参数无效）
	int64 base_time = 1003;

	// file模式和vod模式下，播放视频的起始时间戳，使用unix timestamp毫秒（live模式下该参数无效）
	int64 start_time = 1004;

	// file模式和vod模式下，播放视频的结束时间戳，使用unix timestamp毫秒（live模式下该参数无效）
	int64 end_time = 1005;
}

// 视频截图返回
message ScreenshotResponse {

	// 状态码
	int32 code = 1001;

	// 状态文本
	string message = 1002;



	// 视频截图
	dg.model.common.Image image = 2001;
}

// 监视请求
message WatchRequest {

	// 任务的ID，该ID不允许重复
	string task_id = 1001;
}

// 监视返回
message WatchResponse {

	// 状态码
	int32 code = 1001;

	// 状态文本
	string message = 1002;



	// 视频截图
	dg.model.common.Image image = 2001;
}

// 目录查询请求
message CatalogRequest {

	// 视频平台地址
	dg.model.common.Uri platform_input = 1001;
}

// 目录查询返回
message CatalogResponse {

	// 设备目录集合
	repeated Catalog catalogs = 1001;
}

// 设备目录
message Catalog {

	// 设备ID
	string device_id = 1001;

	// 扩展信息
	map<string, string> extends = 1002;
}


// 运行时状态
message RuntimeStatus {

	// 状态码
	int32 code = 1001;

	// 状态文本
	string state = 1011;

	// 状态文本
	string message = 1002;

	// 资源池占用
	int32 pool = 1003;

	string runningtime = 1100;

	// 任务状态
	RuntimeStatusType runtime_status = 1004;

	// 帧序列号
	string sn = 1005;

	// 相对时间戳
	int64 pts = 1006;

	// 绝对时间戳
	int64 uts = 1007;

	// 绝对时间戳的可视化显示
	string uts_fmt = 1008;

	// 平均每秒跟踪的一级对象个数
	int32 object_number = 1009;

	// 占用设备id
	int32 device_id = 1010;


}

// 任务状态
message TaskStatus {

	// 创建任务的请求
	NewTaskRequest request = 1001;

	// 媒体信息
	MediaInfoResponse media_info = 1002;

	// 运行时状态
	RuntimeStatus runtime_status = 1003;

	// 创建时间戳
	int64 created = 2001;

	// 创建时间的可视化显示
	string created_fmt = 2002;
}

// 运行时状态类型
enum RuntimeStatusType {

	// 默认类型
	UNKNOWN_RUNTIME_STATUS_TYPE = 0;

	// 运行状态
	RUNNING = 1;

	// 失败状态
	FAILED = 2;

	// 完成状态
	FINISHED = 3;

	// 任务执行过程中的某些状态存在问题
	WARNING = 4;
}

message VideoResource {
	int32 width = 1;
	int32 height = 2;
	string url = 3;
}

message HostResRequest {
}

message GPUResource {
	int32 gpu_id = 1;
	float total_pool = 2;
	float left_pool = 3;
	repeated VideoResource video = 4;
}

message HostResource{
	float total_pool = 1;
	float left_pool = 2;
	repeated GPUResource gpus = 3;
}

message GetTaskConfigRequest {
	string task_id = 1001;
}

message GetTaskConfigResponse {
	NewTaskRequest request = 1001;
	string message = 1002;
}

message ExtraMessage {
    map<string,string> AdditionalInfos = 1;
}
