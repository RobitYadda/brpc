syntax = "proto3";

package dg.model.common;

option go_package = "github.com/deepglint/ai-engine/v3/model/common";

// 解码格式
enum CODEC_TYPE {
    
    // 默认类型
    UNKNOWN_CODEC_TYPE = 0;

    // mpeg1
    MPEG1 = 1;

    // mpeg2
    MPEG2 = 2;

    // mpeg4
    MPEG4 = 3;

    // jpeg
    JPEG = 4;

    // mjpeg
    MJPEG = 5;

    // h264
    H264 = 6;

    // h265
    HEVC = 7;

    // vc1
    VC1 = 8;

    // svac
    SVAC = 9;

    // vp8
    VP8 = 10;

    // vp9
    VP9 = 11;

    // raw
    RAW = 12;
}

// 带有默认值的布尔类型
enum BOOL {

    // 默认值
    FKDEFAULT = 0;

    // true
    FKTRUE = 1;

    // false
    FKFALSE = 2;
}

// 功能开关
message Function {

    // 启用机动车检测，默认启用
    BOOL motor_vehicle_detect = 1001;

    // 机动车检测阈值
    float motor_vehicle_detect_threadshold = 1002;

    // 启用机动车属性，默认为空(开启全部)，可选属性之间使用功能字符串加英文逗号进行分割，关闭为false
    string motor_vehicle_attributes = 1003;

    // 启用机动车特征，默认启用
    BOOL motor_vehicle_feature = 1004;
    
    // 启用二次检测，默认关闭
    int32 second_detect = 1005;


    // 启用机动车乘员检测，默认启用
    BOOL motor_vehicle_passenger_detect = 2001;

    // 机动车乘员检测阈值
    float motor_vehicle_passenger_detect_threadshold = 2002;

    // 启用机动车乘员属性，默认为空(开启全部)，可选属性之间使用功能字符串加英文逗号进行分割，关闭为false
    string motor_vehicle_passenger_attributes = 2003;



    // 启用机动车车牌检测，默认启用
    BOOL motor_vehicle_plate_detect = 3001;

    // 机动车车牌检测阈值
    float motor_vehicle_plate_detect_threadshold = 3002;

    // 启用机动车车牌属性，默认为空(开启全部)，可选属性之间使用功能字符串加英文逗号进行分割，关闭为false
    string motor_vehicle_plate_attributes = 3003;



    // 启用机动车小物件检测，默认启用
    BOOL motor_vehicle_symbol_detect = 4001;

    // 机动车小物件检测阈值
    float motor_vehicle_symbol_detect_threadshold = 4002;


    // 启用机动车小物件属性，默认为空(开启全部)，可选属性之间使用功能字符串加英文逗号进行分割，关闭为false
    string motor_vehicle_symbol_attributes = 4003;



    // 启用非机动车检测，默认启用
    BOOL non_motor_vehicle_detect = 5001;

    // 非机动车检测阈值
    float non_motor_vehicle_detect_threadshold = 5002;

    // 启用非机动车属性，默认为空(开启全部)，可选属性之间使用功能字符串加英文逗号进行分割，关闭为false
    string non_motor_vehicle_attributes = 5003;

    // 启用非机动车特征，默认启用
    BOOL non_motor_vehicle_feature = 5004;



    // 启用非机动车骑手检测，默认启用
    BOOL non_motor_vehicle_rider_detect = 6001;

    // 非机动车骑手检测阈值
    float non_motor_vehicle_rider_detect_threadshold = 6002;

    // 启用非机动车骑手属性，默认为空(开启全部)，可选属性之间使用功能字符串加英文逗号进行分割，关闭为false
    string non_motor_vehicle_rider_attributes = 6003;



    // 启用非机动车车牌检测，默认启用
    BOOL non_motor_vehicle_plate_detect = 7001;

    // 非机动车车牌检测阈值
    float non_motor_vehicle_plate_detect_threadshold = 7002;

    // 启用非机动车车牌属性，默认为空(开启全部)，可选属性之间使用功能字符串加英文逗号进行分割，关闭为false
    string non_motor_vehicle_plate_attributes = 7003;



    // 启用行人检测，默认启用
    BOOL pedestrian_detect = 8001;

    float pedestrian_detect_threadshold = 8002;

    // 启用行人属性，默认为空(开启全部)，可选属性之间使用功能字符串加英文逗号进行分割，关闭为false
    string pedestrian_attributes = 8003;

    // 启用行人特征，默认启用
    BOOL pedestrian_feature = 8004;



    // 启用人脸检测，默认启用
    BOOL face_detect = 9001;

    // 人脸检测阈值
    float face_detect_threadshold = 9002;

    // 启用人脸属性，默认为空(开启全部)，可选属性之间使用功能字符串加英文逗号进行分割，关闭为false
    string face_attributes = 9003;

    // 启用人脸特征，默认启用
    BOOL face_feature = 9004;

    // 启用人脸对齐，默认启用
    BOOL face_align = 9005;

    // 启用人脸质量，默认启用
    BOOL face_quality = 9006;
}


// 统一资源
message Uri {

    // 统一资源标志符
    string uri = 1001;

    // 扩展参数
    // is_loop 控制file是否需要循环播放
    map<string, string> params = 1002;
}

// 图像传输类型
enum IMAGE_TYPE {

    // 默认类型
    UNKNOWN_IMAGE_TYPE = 0;

    // 图像二进制模式
    BYTES = 1;

    // 图像base64编码模式
    BASE64 = 2;

    // 图像URI模式
    URI = 3;
}

// 坐标系统类型
enum COORDINATE_TYPE {

    // 默认类型
    UNKNOWN_COORDINATE_TYPE = 0;

    // 使用分辨率坐标
    RESOLUTION = 1;

    // 使用比例坐标
    RATIO = 2;
}

// 区域类型
enum AREA_TYPE {

    // 默认类型
    UNKNOWN_AREA_TYPE = 0;

    // 感兴趣区域
    VALID = 1;

    // 屏蔽区域
    INVALID = 2;
}

// 图像
message Image {

    // 图像传输类型
    IMAGE_TYPE image_type = 1001;

    // 图像的URI
    Uri address = 1002;

    // 图像的base64编码
    string base64_string = 1003;

    // 图像的二进制数据
    bytes buffer = 1004;



    // 图像的宽
    int32 width = 2001;

    // 图像的高
    int32 height = 2002;
}

// 感兴趣区域或屏蔽区域
message Roi {

    // 常规矩形框
    NormalRectangle normal_rectangle = 1001;

    // 多边形
    Polygon polygon = 1002;



    // 检测置信度阈值:目标矩形和 roi的交叠比
    float threshold = 2001;



    // 坐标系统类型
    COORDINATE_TYPE coordinate_type = 3001;

    // 区域类型
    AREA_TYPE area_type = 3002;
}

// 坐标
message Point {

    // x坐标绝对值
    int32 x = 1001;

    // x坐标相对原始图的比例
    float x_ratio = 1002;

    // y坐标绝对值
    int32 y = 1003;

    // y坐标相对原始图的比例
    float y_ratio = 1004;
}

// 常规矩形框
message NormalRectangle {

    // 左上角横坐标的绝对值
    int32 top_left_x = 1001;

    // 左上角横坐标相对原始图的比例
    float top_left_x_ratio = 1002;

    // 左上角纵坐标的绝对值
    int32 top_left_y = 1003;

    // 左上角纵坐标相对原始图的比例
    float top_left_y_ratio = 1004;



    // 检测图宽的绝对值
    int32 width = 2001;

    // 检测图宽相对于原始图的比例
    float width_ratio = 2002;

    // 检测图高的绝对值
    int32 height = 2003;

    // 检测图高相对于原始图的比例
    float height_ratio = 2004;
}

// 旋转矩形框
message RotatedRectangle {

    // 中心点横坐标的绝对值
    int32 center_x = 1001;

    // 中心点横坐标相对原始图的比例
    float center_x_ratio = 1002;

    // 中心点纵坐标的绝对值
    int32 center_y = 1003;

    // 中心点纵坐标相对原始图的比例
    float center_y_ratio = 1004;



    // 检测图宽的绝对值
    int32 width = 2001;

    // 检测图宽相对于原始图的比例
    float width_ratio = 2002;

    // 检测图高的绝对值
    int32 height = 2003;

    // 检测图高相对于原始图的比例
    float height_ratio = 2004;



    // 以中心点为基准顺时针旋转的角度
    float Angle = 3001;
}

// 多边形框
message Polygon {

    // 多边形轮廓坐标列表
    repeated Point points = 1001;
}

// 结构化快照
message Snapshot {
    
    // 状态码
    int32 code = 1001;

    // 状态文本
    string message = 1002;



    // 帧序列号
    int32 sn = 2001;

    // Unix时间戳，单位ms
    int64 uts = 2002;

    // Unix时间戳的可视化显示
    string uts_fmt = 2003;



    // 耗时，单位ms
    int32 time_used = 3001;

    // 记录过程耗时，仅应用于debug模式下
    map<string, string> profiling = 3002;



    // 对象列表
    repeated Object objects = 4001;



    // 用户透传的自定义数据
    map<string, string> user_data = 5001;
}

// 对象类型
enum OBJECT_TYPE {

    // 默认类型
    UNKNOWN_OBJECT_TYPE = 0;



    // 机动车（一级对象）
    MOTOR_VEHICLE = 1001;

    // 非机动车（一级对象）
    NON_MOTOR_VEHICLE = 1002;

    // 行人（一级对象）
    PEDESTRIAN = 1003;

    // 人脸（一级对象）
    FACE = 1004;



    // 标记物（二级对象）
    SYMBOL = 2001;

    // 乘员（二级对象）
    PASSENGER = 2002;

    // 骑手（二级对象）
    RIDER = 2003;

    // 车牌（二级对象）
    PLATE = 2004;
}

// 属性
message Attribute {

    // 属性名称的ID
    int32 attribute_id = 1001;

    // 属性名称的本地化显示
    string attribute_name = 1002;



    // 属性值的ID
    int32 value_id = 2001;

    // 属性值的内容
    string value_content = 2002;



    // 属性的置信度
    float confidence = 3001;
}

// 检测结果
message Detection {

    // 帧序列号
    int32 sn = 1001;

    // Unix时间戳，单位ms
    int64 uts = 1002;

    // Unix时间戳的可视化显示
    string uts_fmt = 1003;



    // 检测到的图像
    Image cutboard_image = 2001;

    // 检测的置信度
    float confidence = 2002;

    // 检测到的常规矩形框
    NormalRectangle detect_rectangle = 2003;

    // 检测到的旋转矩形框
    RotatedRectangle detect_rotated = 2004;
}

// 特征数据类型
enum FEATURE_DATA_TYPE {

    // 默认类型
    UNKNOWN_FEATURE_DATA_TYPE = 0;

    // 整数类型
    INT8 = 1;

    // 半精度浮点类型
    FP16 = 2;

    // 单精度浮点类型
    FP32 = 3;

    // 双精度浮点类型
    FP64 = 4;
}

// 相似度计算类型
enum DISTANCE_TYPE {

    // 默认类型
    UNKNOWN_DISTANCE_TYPE = 0;

    // COS距离
    COS = 1;

    // 欧式距离
    L2 = 2;
}

/*

Feature Header(v1):

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Header Version(v=1)     |          Payload Size         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Object Type          |   Data Type   | Distance Type |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Feature Version                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Feature Dim          |     Extention Block Size      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Extention Blocks                        |
   |                             ....                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Feature                            |
   |                             ....                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Header Version(16bit):
    协议版本，目前为版本v1

Payload Size(16bit):
    数据载荷大小

Object Type(16bit):
    对象类型，请参考OBJECT_TYPE中的定义

Data Type(8bit):
    特征数据类型，请参考FEATURE_DATA_TYPE中的定义

Distance Type(8bit):
    特征距离计算方法，请参考DISTANCE_TYPE中的定义

Feature Version(32bit):
    特征版本

Feature Dim(16bit):
    特征维度

Extention Block Size(16bit):
    扩展块大小

*/

// 特征
message Feature {

    // 特征编码
    string feature = 1001;

    // 特征版本
    string feature_version = 1002;

    // 特征数据类型
    FEATURE_DATA_TYPE feature_data_type = 1003;

    // 特征维度
    int32 feature_dim = 1004;

    // 特征距离计算方法
    DISTANCE_TYPE distance_type = 1005;

    // 特征对象类型
    OBJECT_TYPE object_type = 1006;

    // 计算和分数映射参数
    repeated float params = 1007;
}

// 特征点
message LandmarkPoint {

    // 坐标
    Point point = 1001;

    // 坐标的置信度
    float confidence = 1002;
}

// 对象
message Object {

    // 对象ID
    string object_id = 1001;

    // 对象类型
    OBJECT_TYPE object_type = 1002;

    // 对象类型的可视化显示
    string object_type_name = 1003;

    // 跟踪ID，主要用于进行多个对象之间的reid匹配
    string tracking_id = 1004;

    // 父对象ID
    string father_id = 1005;



    // 检测到的位置信息
    Detection detection = 2001;

    // Alignment结果
    map<string, LandmarkPoint> Landmarks = 2002;

    // 质量列表
    map<string, float> qualities = 2003;

    // 属性列表
    map<string, Attribute> attributes = 2004;

    // 特征列表，此处可同时提供FP32类型的feature和INT8类型的feature，或其他类型
    repeated Feature features = 2005;

    // 轨迹信息，仅应用于视频处理
    repeated Detection trajectory = 2006;



    // 包含的子对象
    repeated Object has = 3001;

    // 扩展信息
    map<string, string> extends = 3002; 
}



message DetectThreshold{
    float Vehicle = 1;
    float NonMotor = 2;
    float Pedestrian = 3;
    float Face = 4;
}

message ClassifyThreshold{
    float Vehicle = 1;
    float NonMotor = 2;
    float Pedestrian = 3;
    float Face = 4;
    float Plate = 5;
}

message QualityThreshold{
    float Face = 1;
    float MinSizeWidth = 2;
    float MinAlignmentScore = 3;
    float MaxAngleRoll = 4;
    float MaxAngleYaw = 5;
    float MaxAnglePitch = 6;
    float MinBlurScore = 7;
}
message IsFaceThreshold{
    float IsFaceMinSizeWidth = 1;
    float LocalIsFaceThreashold = 2;
    float BlurThreashold = 3;
    float GlobalIsFaceThreashold = 4;
    float GlobalFrontFaceThreashold = 5;
    float YawThreashold = 6;
    float PitchThreashold = 7;
    float MinQuality = 8;
}

message Threshold{
    DetectThreshold Detect = 1;
    ClassifyThreshold Classify = 2;
    QualityThreshold Quality = 3;
    IsFaceThreshold IsFace = 4;
}

message Sys{
    float DetectionInterval = 4;
    float CheckTrackInterval = 7;
    int32 ClassifyTopN = 19;
}
